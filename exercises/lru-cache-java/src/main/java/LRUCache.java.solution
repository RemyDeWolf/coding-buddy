import java.util.HashMap;
import java.util.Map;

public class LRUCache<K, V> {
    private int capacity;
    //reference to first element is used to place last recently used element
    private Node<K, V> firstNode;
    //reference to last element is used when shoving the least recently used element
    private Node<K, V> lastNode;
    //use a map to cache results for fast access
    private Map<K, Node<K, V>> cache;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        cache = new HashMap<K, Node<K, V>>(capacity);
    }

    void put(K key, V value) {
        Node<K, V> node = cache.get(key);
        if (node == null) {
            //if the entry is new, add it the cache
            node = new Node<K, V>(key, value, firstNode);
            cache.put(key, node);
            //remove last element if cache is at max capacity
            if (cache.size() > capacity) {
                //remove last entry
                removeLast();
            }
        }
        //place in front of queue
        moveToFront(node);
    }

    public V get(K key) {
        Node<K, V> cachedNode = cache.get(key);
        if (cachedNode != null) {
            //if result found, place in front of queue
            moveToFront(cachedNode);
            return cachedNode.value;
        }
        return null;
    }

    private void moveToFront(Node<K, V> node) {
        if (firstNode == null) {
            firstNode = node;
            lastNode = node;
        } else if (firstNode.key != node.key) {
            if (node.previous == null) {
                //this is a new node (not yet cached), nothing to unchain
            } else if (node.next == null) {
                //special case, the node was in last position
                lastNode = lastNode.previous;
                lastNode.next = null;
            } else {
                //the node was chained in between 2 nodes, unchain it
                node.previous.next = node.next;
                node.next.previous = node.previous;
            }
            //update first node
            firstNode.previous = node;
            node.previous = null;
            node.next = firstNode;
            firstNode = node;
        }
    }

    private void removeLast() {
        if (lastNode != null) {
            cache.remove(lastNode.key);
            lastNode = lastNode.previous;
            lastNode.next = null;
        }
    }

}

class Node<K, V> {
    K key;
    V value;
    Node<K, V> previous;
    Node<K, V> next;

    Node(K key, V value, Node next) {
        this.key = key;
        this.value = value;
        this.next = next;
    }
}
